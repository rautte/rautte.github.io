// ETF DATA // CHECK THE STRUCTURE OF DATA BEFORE PIPELINES


--************************************** <E1> ETF_FUNDS_DECRIPTION <E1> **************************************--


-- Create stage object with integration object & file format object
CREATE OR REPLACE STAGE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_STAGE.FINANCE_CSV
    URL = 's3://snowflakedataengineerproject/Datasets_Analysts_uncleaned/Financials_DBM&DES_DE/CSV_Files/'
    STORAGE_INTEGRATION = S3_DA1
    FILE_FORMAT = DATA_WAREHOUSING_ANALYSTS.FILE_FORMATS.CSV_FT ;
   
LIST @DATA_WAREHOUSING_ANALYSTS.EXTERNAL_STAGE.FINANCE_CSV;


CREATE OR REPLACE EXTERNAL TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_DATA_EXT
    WITH LOCATION = @DATA_WAREHOUSING_ANALYSTS.EXTERNAL_STAGE.FINANCE_CSV
    FILE_FORMAT = (FORMAT_NAME = DATA_WAREHOUSING_ANALYSTS.FILE_FORMATS.CSV_FT, SKIP_HEADER = 1)
    AUTO_REFRESH = TRUE
    PATTERN = '.*ETFs.*' ;

-- DROP TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_DATA_EXT;
SELECT * FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_DATA_EXT;

// 
CREATE OR REPLACE TABLE DATA_ANALYST_PROCESSED.ETFS.ETF_FUNDS_DECRIPTION(
    Fund_Symbol STRING, 
    Fund_Type STRING,
    region STRING,
    fund_short_name STRING,
    fund_long_name STRING,
    currency STRING,
    exchange_name STRING,
    exchange_time_zone STRING,
    -- avg_vol_3mon NUMBER, // NOT NEEDED HERE
    PRIMARY KEY (Fund_Symbol));    

INSERT INTO DATA_ANALYST_PROCESSED.ETFS.ETF_FUNDS_DECRIPTION
    select 
        VALUE:c1::string as Fund_Symbol,
        VALUE:c2::string as Fund_Type, 
        VALUE:c3::string as region,
        VALUE:c4::string as fund_short_name,
        VALUE:c5::string as fund_long_name,
        VALUE:c6::string as currency,
        VALUE:c10::string as exchange_name,
        VALUE:c11::string as exchange_time_zone,
        -- try_cast(VALUE:c12::string as number) as avg_vol_3mon, // COLUMN REMOVED FROM TABLE
    from DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_DATA_EXT;

-- TRUNCATE TABLE DATA_ANALYST_PROCESSED.ETFS.ETF_FUNDS_DECRIPTION;
-- SELECT * FROM DATA_ANALYST_PROCESSED.ETFS.ETF_FUNDS_DECRIPTION;


-- ************************************** <E2> ETF_PRICES <E2> **************************************--


// CREATE TEMPORARY TABLE TO HOLD 
CREATE OR REPLACE EXTERNAL TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_EXT
    WITH LOCATION = @DATA_WAREHOUSING_ANALYSTS.EXTERNAL_STAGE.FINANCE_CSV
    FILE_FORMAT = (FORMAT_NAME = DATA_WAREHOUSING_ANALYSTS.FILE_FORMATS.CSV_FT, SKIP_HEADER = 1)
    AUTO_REFRESH = TRUE
    PATTERN = '.*ETF [pP]rice.*';
    
-- DROP EXTERNAL TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_EXT;
-- SELECT count(*) FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_EXT;


// CREATE DESTINTION TABLE FOR ETF PRICES
CREATE OR REPLACE TABLE DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES(
    fund_symbol STRING,
    price_date	DATE,
    open REAL,
    high REAL,
    low	REAL,
    close REAL,
    adj_close REAL,
    volume INT);


// INSERT ETF PRICE DATA MANUALLY INTO DESTINATION TABLE
INSERT INTO DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES
SELECT 
    VALUE:c1::STRING AS fund_symbol,
    TO_DATE(TO_TIMESTAMP_NTZ(VALUE:c2::STRING, 'MM/DD/YY')) AS price_date,
    VALUE:c3::REAL AS open,
    VALUE:c4::REAL AS high,
    VALUE:c5::REAL AS low,
    VALUE:c6::REAL AS close,
    VALUE:c7::REAL AS adj_close,
    VALUE:c8::INT AS volume
FROM 
    DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_EXT;

-- TRUNCATE TABLE DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES;
-- SELECT * FROM DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES;

  
// DEFINE STRUCTURE OF TABLE TO ACT AS A STAGE
CREATE OR REPLACE TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STAGE (
    fund_symbol STRING,
    price_date STRING,
    open REAL,
    high REAL,
    low REAL,
    close REAL,
    adj_close REAL,
    volume INT);



// CREATE TABLE TO STORE ETF PRICE ERROR INFO
CREATE OR REPLACE TABLE DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_ERRORS_INFO (
    file_name STRING,
    line_number INT,
    error_message STRING,
    column_name STRING,
    error_category STRING,
    error_phase STRING,
    insertion_time TIMESTAMP_NTZ);

// 
CREATE OR REPLACE TABLE DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_REJECTED (
    rejects STRING);
ALTER TABLE DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_REJECTED
    ADD CONSTRAINT unique_rejects UNIQUE (rejects);


// DEFINE PIPE
CREATE OR REPLACE PIPE DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STAGE
    FROM @DATA_WAREHOUSING_ANALYSTS.EXTERNAL_STAGE.FINANCE_CSV
    FILE_FORMAT = (FORMAT_NAME = DATA_WAREHOUSING_ANALYSTS.FILE_FORMATS.CSV_FT, SKIP_HEADER = 1)
    PATTERN = '.*ETF [Pp]rice.*'
    ON_ERROR = 'CONTINUE';
    -- RETURN_FAILED_ONLY = TRUE ;

// MANAGE PIPES
-- DESC PIPE DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE;
-- SHOW PIPES;
-- SHOW PIPES like '%ETF_PRICE%';
-- SHOW PIPES in database DATA_WAREHOUSING_ANALYSTS;
-- SHOW PIPES in schema DATA_WAREHOUSING_ANALYSTS.DATA_PIPES;
-- SHOW PIPES like '%ETF_PRICE%' in Database DATA_WAREHOUSING_ANALYSTS;
-- ALTER PIPE DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE SET PIPE_EXECUTION_PAUSED = TRUE; -- Pause PIPE
-- SELECT SYSTEM$PIPE_STATUS('DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE') ;
-- ALTER PIPE DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE refresh;

-- SELECT * FROM TABLE(VALIDATE_PIPE_LOAD(
--     PIPE_NAME => 'DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE',
--     START_TIME => DATEADD(HOUR,-2,CURRENT_TIMESTAMP()))); -- Snowpipe error message

-- SELECT * FROM TABLE (INFORMATION_SCHEMA.COPY_HISTORY(
--    table_name  =>  'DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES',
--    START_TIME =>DATEADD(HOUR,-2,CURRENT_TIMESTAMP()))); -- COPY command history from table to see error massage

-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STAGE;
    -- WHERE FUND_SYMBOL IS NOT NULL AND FUND_SYMBOL = '555';
    
-- DROP PIPE DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE;


// CREATE STREAM 
CREATE OR REPLACE STREAM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STREAM 
ON TABLE DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STAGE;

// MANAGE STREAM 
-- SELECT 
--     METADATA$ACTION,
--     METADATA$ISUPDATE,
--     fund_symbol,
--     price_date
-- FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STREAM; -- Stream METADATA

-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STREAM;
-- SHOW STREAMS LIKE 'ETF_PRICES_STREAM';
-- SHOW SCHEMAS IN DATABASE DATA_WAREHOUSING_ANALYSTS;
-- SHOW TABLES IN SCHEMA DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES;
-- DROP STREAM IF EXISTS DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STREAM;


// CREATE TASK TO HANDLE ERRORS INFORMATION
CREATE OR REPLACE TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_PIPE_ERRORS_TASK
WAREHOUSE = 'COMPUTE_WH'
SCHEDULE = 'USING CRON * * * * * UTC'  -- Runs every minute
AS
INSERT INTO DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_ERRORS_INFO
SELECT 
    FILE AS file_name,
    ROW_NUMBER AS line_number,
    ERROR AS error_message,
    SPLIT_PART(COLUMN_NAME,'"',4) AS column_name,
    CATEGORY as error_category,
    'Pipe Load Error' AS error_phase,
    CURRENT_TIMESTAMP AS insertion_time
FROM TABLE(VALIDATE_PIPE_LOAD(
    PIPE_NAME => 'DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE',
    START_TIME => DATEADD(MINUTE, -5, CURRENT_TIMESTAMP())  -- Adjust the time range as needed
))
WHERE ERROR_MESSAGE IS NOT NULL;

-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_ERRORS_INFO;
-- TRUNCATE TABLE DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_ERRORS_INFO;

// MANAGE ERROR TASK
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_PIPE_ERRORS_TASK SUSPEND; -- Suspend the task
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_PIPE_ERRORS_TASK RESUME; -- Resume the task to trigger execution

-- SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY
--     WHERE DATABASE_NAME = 'DATA_WAREHOUSING_ANALYSTS'
--     AND SCHEMA_NAME = 'DATA_PIPES'
--     AND NAME = 'CAPTURE_PIPE_ERRORS_TASK' 
--     ORDER BY SCHEDULED_TIME DESC
--     LIMIT 20;

-- SHOW TASKS;
-- SHOW TASKS IN SCHEMA DATA_WAREHOUSING_ANALYSTS.DATA_PIPES;
-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.INFORMATION_SCHEMA.TASKS WHERE TASK_NAME = 'CAPTURE_PIPE_ERRORS_TASK';
-- DROP TASK IF EXISTS DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_PIPE_ERRORS_TASK;


// CREATE TASK TO GET SINGLE COLUMN ERROR RECORDS
CREATE OR REPLACE TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_REJECTED_RECORDS_TASK
WAREHOUSE = 'COMPUTE_WH'
SCHEDULE = 'USING CRON * * * * * UTC'  -- Runs every minute
AS
INSERT INTO DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_REJECTED
SELECT 
    REJECTED_RECORD AS rejects
FROM TABLE(VALIDATE_PIPE_LOAD(
    PIPE_NAME => 'DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE',
    START_TIME => DATEADD(MINUTE, -1, CURRENT_TIMESTAMP())
))
WHERE ERROR IS NOT NULL;

-- SELECT distinct rejects FROM DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_REJECTED;
-- TRUNCATE TABLE DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_REJECTED;

// MANAGE ERROR TASK
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_REJECTED_RECORDS_TASK SUSPEND; -- Suspend the task
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_REJECTED_RECORDS_TASK RESUME; -- Resume the task to trigger execution

-- SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY
--     WHERE DATABASE_NAME = 'DATA_WAREHOUSING_ANALYSTS'
--     AND SCHEMA_NAME = 'DATA_PIPES'
--     AND NAME = 'CAPTURE_REJECTED_RECORDS_TASK' 
--     ORDER BY SCHEDULED_TIME DESC
--     LIMIT 20;

-- SHOW TASKS;
-- SHOW TASKS IN SCHEMA DATA_WAREHOUSING_ANALYSTS.DATA_PIPES;
-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.INFORMATION_SCHEMA.TASKS WHERE TASK_NAME = 'CAPTURE_REJECTED_RECORDS_TASK';
-- DROP TASK IF EXISTS DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_REJECTED_RECORDS_TASK;


// CREATE TASK TO TRANSFORM DATE COLUMN
CREATE OR REPLACE TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_TRANSFORM_TASK
WAREHOUSE = 'COMPUTE_WH'
SCHEDULE = 'USING CRON * * * * * UTC'  -- Runs every minute
AS
-- Insert valid records into the final table
INSERT INTO DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES
SELECT 
    fund_symbol,
    TO_DATE(TO_TIMESTAMP_NTZ(price_date, 'MM/DD/YY')) AS price_date,
    open,
    high,
    low,
    close,
    adj_close,
    volume
FROM DATA_WAREHOUSING_ANALYSTS.EXTERNAL_TABLES.ETF_PRICES_STREAM
    WHERE METADATA$ACTION = 'INSERT'
    AND TRY_TO_TIMESTAMP_NTZ(price_date, 'MM/DD/YY') IS NOT NULL
    AND TRY_CAST(fund_symbol AS STRING) IS NOT NULL
    AND TRY_CAST(volume AS INT) IS NOT NULL
    AND TRY_CAST(open AS REAL) IS NOT NULL
    AND TRY_CAST(high AS REAL) IS NOT NULL
    AND TRY_CAST(low AS REAL) IS NOT NULL
    AND TRY_CAST(close AS REAL) IS NOT NULL
    AND TRY_CAST(adj_close AS REAL) IS NOT NULL;

-- SELECT COUNT(*) FROM DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES;

// MANAGE TRANSFORM TASK
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_TRANSFORM_TASK SUSPEND; -- Suspend the task
-- ALTER TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_TRANSFORM_TASK RESUME; -- Resume the task to trigger execution

-- SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY
--     WHERE DATABASE_NAME = 'DATA_WAREHOUSING_ANALYSTS'
--     AND SCHEMA_NAME = 'DATA_PIPES'
--     AND NAME = 'ETF_PRICES_TRANSFORM_TASK' 
--     ORDER BY SCHEDULED_TIME DESC
--     LIMIT 20;

-- SHOW TASKS;
-- SHOW TASKS IN SCHEMA DATA_WAREHOUSING_ANALYSTS.DATA_PIPES;
-- SELECT * FROM DATA_WAREHOUSING_ANALYSTS.INFORMATION_SCHEMA.TASKS WHERE TASK_NAME = 'ETF_PRICES_TRANSFORM_TASK';
-- DROP TASK IF EXISTS DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_TRANSFORM_TASK;
 

// CREATE TASK TO TABULATE ERROR RECORDS
CREATE OR REPLACE TASK DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.CAPTURE_ERRORS_TASK
WAREHOUSE = 'COMPUTE_WH'
SCHEDULE = 'USING CRON * * * * * UTC'  -- Runs every minute
AS
INSERT INTO DATA_WAREHOUSING_ANALYSTS.ERRORS.ETF_PRICES_ERRORS
SELECT 
    REJECTED_RECORD AS rejects
FROM TABLE(VALIDATE_PIPE_LOAD(
    PIPE_NAME => 'DATA_WAREHOUSING_ANALYSTS.DATA_PIPES.ETF_PRICES_PIPE',
    START_TIME => DATEADD(HOUR, -1, CURRENT_TIMESTAMP())  -- Adjust the time range as needed
))
WHERE ERROR_MESSAGE IS NOT NULL;