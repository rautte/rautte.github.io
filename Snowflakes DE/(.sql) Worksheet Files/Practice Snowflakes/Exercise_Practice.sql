-- EXERCISE 0 (CREATING WAREHOUSE | COMPUTE MUSCLE)

USE ROLE SYSADMIN

CREATE OR REPLACE WAREHOUSE EXERCISE_WH
WAREHOUSE_TYPE = STANDARD --'SNOWPARK-OPTIMIZED'
WAREHOUSE_SIZE = XSMALL --'XS(1 credit) | S(2 credits) | M(4 credits) | L(8 credits) | XL(16 credits) ...'
SCALING_POLICY = 'Economy' --'Standard'
MIN_CLUSTER_COUNT = 1
MAX_CLUSTER_COUNT = 3
AUTO_SUSPEND = 600  -- automatically suspend the virtual warehouse after 10 minutes of not being used
AUTO_RESUME = TRUE 
INITIALLY_SUSPENDED = FALSE
COMMENT = 'This is a virtual warehouse of size X-SMALL that can be used to process queries.';
-- RESOURCE_MONITOR = <monitor_name>
-- ENABLE_QUERY_ACCELERATION = { TRUE | FALSE }
-- QUERY_ACCELERATION_MAX_SCALE_FACTOR = <num>

ALTER WAREHOUSE EXERCISE_WH SUSPEND
ALTER WAREHOUSE EXERCISE_WH RESUME
ALTER WAREHOUSE EXERCISE_WH ABORT ALL QUERIES
ALTER WAREHOUSE EXERCISE_WH RENAME TO TRIAL_01

ALTER WAREHOUSE TRIAL_01 SET 
AUTO_SUSPEND = 300
SCALING_POLICY = 'Standard'

DROP WAREHOUSE TRIAL_01

CREATE OR REPLACE WAREHOUSE WAREHOUSE_01
WAREHOUSE_TYPE = STANDARD 
WAREHOUSE_SIZE = XSMALL 
SCALING_POLICY = 'Standard' 
MIN_CLUSTER_COUNT = 1
MAX_CLUSTER_COUNT = 3
AUTO_SUSPEND = 300  
AUTO_RESUME = TRUE 
INITIALLY_SUSPENDED = FALSE
COMMENT = 'This is a virtual warehouse of size X-SMALL that can be used to process queries.';

ALTER WAREHOUSE WAREHOUSE_01 RESUME

USE WAREHOUSE WAREHOUSE_01


-- EXERCISE 1 (COPY INTO)

CREATE OR REPLACE TABLE "EXERCISE_DB"."TESTSCHEMA"."CUSTOMERS"(
ID INT,
first_name varchar,
last_name varchar,
email varchar,
age int,
city varchar
)

COPY INTO CUSTOMERS
FROM s3://snowflake-assignments-mc/gettingstarted/customers.csv
FILE_FORMAT = (
TYPE = CSV
FIELD_DELIMITER = ','
SKIP_HEADER = 1
)

SELECT COUNT(*) RECORDS FROM CUSTOMERS


-- EXERCISE 2 and 3 (STAGE_OBJECT | FILE FORMAT_OBJECT | COPY INTO)

USE SCHEMA EXERCISE_DB.TESTSCHEMA

TRUNCATE TABLE EXERCISE_DB.TESTSCHEMA.CUSTOMERS

CREATE OR REPLACE SCHEMA EXERCISE_DB.EXTERNAL_STAGES

CREATE OR REPLACE STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE1
    URL = 's3://snowflake-assignments-mc/loadingdata/'

DESC STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE1

LIST @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE1

CREATE OR REPLACE SCHEMA EXERCISE_DB.FILE_FORMATS

CREATE OR REPLACE FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_SEMICOLON
    TYPE = CSV
    FIELD_DELIMITER = ';'
    SKIP_HEADER = 0

DESC FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_SEMICOLON

ALTER FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_SEMICOLON
    SET SKIP_HEADER = 1

COPY INTO EXERCISE_DB.TESTSCHEMA.CUSTOMERS
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE1
    -- FILE_FORMAT = (TYPE = CSV FIELD_DELIMITER = ';' SKIP_HEADER = 1)
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_SEMICOLON)
    PATTERN = '.*customers.*'
    ON_ERROR = 'CONTINUE' -- 'ABORT_STATEMENT' | 'SKIP_FILE' | 'SKIP_FILE_2' | 'SKIP_FILE_0.5%'

SELECT COUNT(*) FROM EXERCISE_DB.TESTSCHEMA.CUSTOMERS


-- EXERCISE 4 (ON_ERROR)

TRUNCATE TABLE EXERCISE_DB.TESTSCHEMA.CUSTOMERS

CREATE STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE2
    URL = 's3://snowflake-assignments-mc/fileformat/'

LIST @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE2

CREATE FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_PIPE
    TYPE = CSV
    FIELD_DELIMITER = '|'
    SKIP_HEADER = 1

DESC FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_PIPE

COPY INTO EXERCISE_DB.TESTSCHEMA.CUSTOMERS
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE2
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_PIPE)
    PATTERN = '.*customers.*'
    ON_ERROR = 'CONTINUE'

SELECT COUNT(*) FROM EXERCISE_DB.TESTSCHEMA.CUSTOMERS  


-- EXERCISE 5 (VALIDATION MODE | ON_ERROR)

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.EMPLOYEES(
    customer_id int,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(50),
    age int,
    department varchar(50));

CREATE OR REPLACE STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE3
    URL = 's3://snowflake-assignments-mc/copyoptions/example1';

LIST @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE3;

CREATE OR REPLACE FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_COMMA
    TYPE = CSV
    FIELD_DELIMITER = ','
    SKIP_HEADER = 1;

COPY INTO EXERCISE_DB.TESTSCHEMA.EMPLOYEES
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE3
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_COMMA)
    PATTERN = '.*employees.*'
    FORCE = FALSE
    SIZE_LIMIT = 7000 --bytes
    ON_ERROR = 'CONTINUE'
    RETURN_FAILED_ONLY = TRUE;
    -- VALIDATION_MODE = RETURN_ERRORS

SELECT COUNT(*) FROM EXERCISE_DB.TESTSCHEMA.EMPLOYEES


-- EXERCISE 6 (HANDLING ERRORS | VALIDATION_MODE | CREATING ERROR LOGS)

TRUNCATE TABLE EXERCISE_DB.TESTSCHEMA.EMPLOYEES;

CREATE OR REPLACE STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE4
    URL = 's3://snowflake-assignments-mc/copyoptions/example2';

LIST @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE4;

CREATE OR REPLACE SCHEMA EXERCISE_DB.ERRORS;

COPY INTO EXERCISE_DB.TESTSCHEMA.EMPLOYEES
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE4
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_COMMA)
    PATTERN = '.*employees.*'
    VALIDATION_MODE = 'RETURN_ERRORS';

CREATE OR REPLACE TABLE EXERCISE_DB.ERRORS.REJECTS1 AS
    select rejected_record from table(result_scan(last_query_id()));

COPY INTO EXERCISE_DB.TESTSCHEMA.EMPLOYEES
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE4
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_COMMA)
    PATTERN = '.*employees.*'
    VALIDATION_MODE = 'RETURN_ERRORS';

INSERT INTO EXERCISE_DB.ERRORS.REJECTS1
    select rejected_record from table(result_scan(last_query_id()));

SELECT * FROM EXERCISE_DB.ERRORS.REJECTS1

COPY INTO EXERCISE_DB.TESTSCHEMA.EMPLOYEES
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_STAGE4
    FILE_FORMAT = (FORMAT_NAME = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_COMMA)
    PATTERN = '.*employees.*'
    SIZE_LIMIT = 5000 --bytes
    TRUNCATECOLUMNS = TRUE;

SELECT COUNT(*) FROM EXERCISE_DB.TESTSCHEMA.EMPLOYEES


-- EXERCISE 7.1 (LOAD JSON FILE)

CREATE OR REPLACE STAGE EXERCISE_DB.EXTERNAL_STAGES.AWS_JSON
    URL = 's3://snowflake-assignments-mc/unstructureddata/';

LIST @EXERCISE_DB.EXTERNAL_STAGES.AWS_JSON

CREATE OR REPLACE FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_JSON
    TYPE = JSON;

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.JSON_RAW(
    RAW VARIANT);

COPY INTO EXERCISE_DB.TESTSCHEMA.JSON_RAW
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AWS_JSON
    FILE_FORMAT = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_JSON
    FILES = ('Jobskills.json')
    SIZE_LIMIT = 15000 --bytes
    FORCE = FALSE
    ON_ERROR = 'CONTINUE'
    RETURN_FAILED_ONLY = TRUE

SELECT * FROM EXERCISE_DB.TESTSCHEMA.JSON_RAW


-- EXERCISE 7.2.A (JSON_TYPE | LOAD | TRANSFORM | FLATTEN ARRAY ELEMENTS | CREATE A TABLE)

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES AS
SELECT 
    RAW:id::int as ID,
    RAW:age::int as Age,
    RAW:first_name::string as First_Name,
    RAW:last_name::string as Last_Name,
    f.value::string as Skills,
    array_size(RAW:Skills) as Skill_Count,
    RAW:department::string as Department
FROM EXERCISE_DB.TESTSCHEMA.JSON_RAW, table(flatten(RAW:Skills)) f;

SELECT * FROM EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES


-- EXERCISE 7.2.B (JSON_TYPE | LOAD | TRANSFORM | FLATTEN ARRAY ELEMENTS | INTO A TABLE)

TRUNCATE TABLE EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES

INSERT INTO EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES
SELECT 
    -- METADATA$FILENAME as FILENAME,
    -- METADATA$FILE_ROW_NUMBER as ROWNUMBER,
    RAW:id::int as ID,
    RAW:age::int as Age,
    RAW:first_name::string as First_Name,
    RAW:last_name::string as Last_Name,
    f.value::string as Skills,
    array_size(RAW:Skills) as Skill_Count,
    RAW:department::string as Department
FROM EXERCISE_DB.TESTSCHEMA.JSON_RAW, table(flatten(RAW:Skills)) f;

SELECT * FROM EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES


-- EXERCISE 8.1 (TRANSFORM AND LOAD JSON_TYPE DATA INTO A TABLE)

TRUNCATE TABLE EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES AS
SELECT 
    RAW:first_name::string as First_Name,
    RAW:last_name::string as Last_Name,
    RAW:Skills[0]::string as Skill_1,
    RAW:Skills[1]::string as Skill_2
FROM EXERCISE_DB.TESTSCHEMA.JSON_RAW;

SELECT SKILL_1 FROM EXERCISE_DB.TESTSCHEMA.TEMP_EMPLOYEES
WHERE FIRST_NAME = 'Florina'


-- EXERCISE 8.2 (PARQUET_TYPE | LOAD | TRANSFORM)

CREATE OR REPLACE STAGE EXERCISE_DB.EXTERNAL_STAGES.AZURE_PARQUET;

LIST @EXERCISE_DB.EXTERNAL_STAGES.AZURE_PARQUET;

CREATE OR REPLACE FILE FORMAT EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_PARQUET
    TYPE = PARQUET;

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.ACTIVITY(
    RAW VARIANT);

COPY INTO EXERCISE_DB.TESTSCHEMA.ACTIVITY
    FROM @EXERCISE_DB.EXTERNAL_STAGES.AZURE_PARQUET
    FILE_FORMAT = EXERCISE_DB.FILE_FORMATS.FILE_FORMAT_PARQUET
    FILES = ('ActivityLog-01.parquet')
    ON_ERROR = 'CONTINUE'
    RETURN_FAILED_ONLY = TRUE

SELECT * FROM EXERCISE_DB.TESTSCHEMA.ACTIVITY

CREATE OR REPLACE TABLE EXERCISE_DB.TESTSCHEMA.ACTIVITY2 AS
SELECT 
    RAW:Correlationid::string as Correlation_Id,
    RAW:Eventcategory::string as Event_Category,
    IFNULL(RAW:Eventinitiatedby::string, 'N/A') as Event_initiated_By,
    RAW:Level::string as Level,
    RAW:Operationname::string as Operation_Name,
    RAW:Resource::string as "Resource",
    RAW:Resourcegroup::string as Resource_Group,
    RAW:Resourcetype::string as Resource_Type,
    RAW:Status::string as Status,
    RAW:Subscription::string as Subscription,
    DATE(TO_TIMESTAMP_NTZ(RAW:Time::string, 'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"')) as Date,
    TIME(TO_TIMESTAMP_NTZ(RAW:Time::string, 'YYYY-MM-DD"T"HH24:MI:SS.FF3"Z"')) as Time
FROM EXERCISE_DB.TESTSCHEMA.ACTIVITY

SELECT * FROM EXERCISE_DB.TESTSCHEMA.ACTIVITY2


-- TRIAL QUERY

SELECT * FROM snowflake.account_usage.load_history;
SELECT * FROM snowflake.account_usage.login_history;
SELECT * FROM snowflake.account_usage.file_formats;

-- EXERCISE 9 ()
EXPLAIN SELECT COUNT(*) FROM DATA_ANALYST_PROCESSED.ETFS.ETF_PRICES;



